{"version":3,"names":[],"mappings":"","sources":["plugins/codemirror/codemirror_custom.js"],"sourcesContent":["/*\n* Plugin:  Codemirror Plugin\n* Version: 1.0.0 (20.08.2018.)\n*\n* Author:  Marko Goricki, BiLog\n* Mail:    mgoricki@gmail.com\n* Twitter: @mgoricki\n* Blog:    apexbyg.blogspot.com \n*\n* Depends:\n*    apex/debug.js\n*\n* Changes:\n*\n* v.1.0.0 - 20180820 - Initial version\n*\n* Public Methods:\n*\n*   Get Options\n*   $('#P6_DEPTNO').master_detail_item('option');\n*\n*   Get Selected Row Data\n*   $('#P6_DEPTNO').master_detail_item('getSelectedRowData');\n*\n* Notes:\n*   - \n*\n*/\n\n// Custom Hint Function\n/*\nfunction customHint ( pEditor, pCallback, pOptions ) {\n  var cur    = pEditor.getCursor(),\n      token  = pEditor.getTokenAt(cur),\n      search = token.string.trim();\n\n  // pData has to be in the format:\n  //   [\n  //     type:      \"string\" (template, application_item, page_item, package, procedure, function, constant, variable, type, table, view),\n  //     title:     \"string\",\n  //     className: \"string\",\n  //     completions: [\n  //       { d: \"string\", r: \"string\" } or \"string\"\n  //     ]\n  //   ]\n  function _success( pData ) {\n\n    var type,\n        completion,\n        completions = [];\n    for ( var i = 0; i < pData.length; i++ ) {\n        type = pData[ i ];\n\n        for ( var j = 0; j < type.completions.length; j++ ) {\n            completion = type.completions[ j ];\n            completions.push({\n                text:        completion.r || completion,\n                displayText: ( completion.d || completion ) + \" (\" + type.title + \")\",\n                className:   type.className,\n                type:        type.type,\n                hint:        _replaceCompletion\n            });\n        }\n    }\n\n    // sort our hint list by display value, but always use lower case, because PL/SQL is not case sensitive\n    completions.sort( function( a, b ) {\n        return a.displayText.toLowerCase().localeCompare( b.displayText.toLowerCase());\n    });\n\n    pCallback({\n        list: completions,\n        from: CodeMirror.Pos( cur.line, token.start ),\n        to:   CodeMirror.Pos( cur.line, token.end )\n    });\n\n  } // _success\n\n\n  function _replaceCompletion( pEditor, pSelf, pCompletion ) {\n\n      var text = pCompletion.text,\n          cursor,\n          placeholders,\n          placeholder,\n          placeholderValues = {},\n          cursorPlaceholderPos,\n          newLinePos;\n\n      // For package we automatically want to add \".\" at the end to immediately allow to enter a function/variable/...\n      if ( pCompletion.type === \"package\" ) {\n\n          text  += \".\";\n\n      } else if ( pCompletion.type === \"procedure\" || pCompletion.type === \"function\" ) {\n\n          // For procedures and functions we automatically want to add () at the end and position the cursor\n          // between the brackets\n\n          text  += \"()\";\n          cursor = {\n              line: pSelf.from.line,\n              ch:   pSelf.from.ch + text.length - 1\n          };\n\n      } else if ( pCompletion.type === \"template\" ) {\n\n          // For templates, ask the user for a value for each placeholders in the format $xxx$ and replace\n          // it in the text\n          placeholders = text.match( /\\$[a-z]{1,}\\$/g );\n          if ( placeholders ) {\n              for ( var i = 0; i < placeholders.length; i++ ) {\n                  placeholder = placeholders[ i ].substr( 1, placeholders[ i ].length - 2 );\n                  if ( !placeholderValues.hasOwnProperty( placeholder ) && placeholder !== \"cursor\" ) {\n                      placeholderValues[ placeholder ] = window.prompt( placeholder );\n                  }\n              }\n              for ( placeholder in placeholderValues ) {\n                  if ( placeholderValues.hasOwnProperty( placeholder )) {\n                      text = text.replace( new RegExp( \"\\\\$\" + placeholder + \"\\\\$\", \"gi\" ), placeholderValues[ placeholder ]);\n                  }\n              }\n          }\n          // Indent each line of the template with spaces\n          if ( pSelf.from.ch > 0 ) {\n              text = text.replace( /\\n/g, \"\\n\" + new Array( pSelf.from.ch + 1 ).join( \" \" ));\n          }\n          // If the $cursor$ placeholder has been used, put the cursor at this position\n          cursorPlaceholderPos = text.indexOf( \"$cursor$\" );\n          if ( cursorPlaceholderPos !== -1 ) {\n              newLinePos = text.lastIndexOf( \"\\n\", cursorPlaceholderPos );\n              if ( newLinePos !== - 1 ) {\n                  cursor = {\n                      line: pSelf.from.line + ( text.substr( 0, cursorPlaceholderPos ).match( /\\n/g ) || [] ).length,\n                      ch:   cursorPlaceholderPos - newLinePos - 1\n                  };\n              } else {\n                  cursor = {\n                      line: pSelf.from.line,\n                      ch:   pSelf.from.ch + cursorPlaceholderPos\n                  };\n              }\n              text = text.replace( /\\$cursor\\$/, \"\" );\n          }\n      }\n\n      pEditor.replaceRange( text, pSelf.from, pSelf.to );\n\n      if ( cursor ) {\n          pEditor.doc.setCursor( cursor );\n      }\n  } // _replaceCompletion\n\n\n  function _getPrevToken( pToken ) {    \n    var prevToken = pEditor.getTokenAt({ line: cur.line, ch: pToken.start });\n    if (pToken.string === \".\" ) {\n      return prevToken;\n    } else if ( prevToken.string === \".\" ) {\n      return _getPrevToken( prevToken );\n    } else {\n      return null;\n        \n    }\n    \n  } // _getPrevToken\n\n\n  // Check if we are dealing with a multi level object (ie. [schema.]package.procedure/function/... or schema.table/view/procedure/function)\n  prevToken = _getPrevToken(token);\n  if ( prevToken && prevToken.string !== \"\" ) {\n      parentName      = prevToken.string;\n      grandParentName = \"\";\n\n      // In the case of a package, check if a schema has been specified\n      prevToken = _getPrevToken( prevToken );\n      if ( prevToken ) {\n          grandParentName = prevToken.string;\n      }\n\n      // If a user has just entered a dot so far, don't use it to restrict the search\n      if ( search === \".\" ) {\n          search = \"\";\n          token.start++;\n      }\n\n  } else if ( search.indexOf( \":\" ) === 0 || search.indexOf( \"&\" ) === 0 ) {\n      // If the token starts with \":\" or \"&\" we expect it's a bind variable/substitution syntax and we want to code complete application and page items\n\n      type = \"item\";\n\n      // Remove the colon/and to not replace it later on\n      search = search.substr( 1 );\n      token.start++;\n\n  } else {\n      // Could be a database object or a template\n      type = \"\";\n  }\n\n  // Only call the server if the user has entered at least one character\n  if ( parentName || search ) {\n      pOptions.dataCallback({\n          type:        type,\n          search:      search,\n          parent:      parentName,\n          grantParent: grandParentName\n      }, _success );\n  }\n}; // end _customHint\n*/\n(function ($, util) {\n  \"use strict\";\n\n  var C_TOOLBAR_CLASS = \"codemirror-toolbar\";\n  var C_TOOLBAR_CLASS_READONLY = \"codemirror-readonly\";\n\n  $.widget(\"apex.codemirror_plugin\", {\n    options : {\n      itemName : null,\n      readonly: false,\n      ignoreChanged: false, // Warn On Unsaved Changes\n      ajaxId: null,\n      autocomplete: false\n    },\n    changed: false,\n    baseId:  \"aCodeMirrorPlugin\",\n\n    // init function\n    _init : function () {\n      var uiw = this;\n      var vMasterOk = false;\n\n      uiw.baseId = uiw.options.itemName;\n\n      uiw._editor = \n        CodeMirror.fromTextArea(document.getElementById(uiw.options.itemName),\n          {\n            mode:\"text/x-plsql\",\n            indentWithTabs: true,\n            martIndent: true,\n            lineNumbers: true,\n            matchBrackets : true,\n            textWrapping : false,\n            autofocus: false,\n            indentUnit: 2,\n            smartIndent: true,\n            tabSize: 2,\n            viewportMargin: 5,\n            readOnly: uiw.options.readonly,//\"nocursor\"\n            extraKeys: {              \n              \"Ctrl-Space\": \"autocomplete\",\n              \"F11\": function(cm) {\n                cm.setOption(\"fullScreen\", !cm.getOption(\"fullScreen\"));\n              },\n              \"Esc\": function(cm) {\n                if (cm.getOption(\"fullScreen\")) cm.setOption(\"fullScreen\", false);\n              }\n            },\n            autoCloseBrackets: true\n          });\n\n      // event handlers\n      // if Warn on unsaved changes is set to Yes\n      if (!uiw.options.ignoreChanged){\n        uiw._editor.on('change', function(){\n          uiw.changed = true;\n          \n          var vHistory$ = uiw._editor.historySize();\n          $(\"#\" + uiw.baseId + \"_undo\")[0].disabled = vHistory$.undo === 0;\n          $(\"#\" + uiw.baseId + \"_redo\")[0].disabled = vHistory$.redo === 0;\n        });  \n      }\n\n      // code complete\n            \n      \n      \n      uiw._initToolbar();\n\n      // if Editor is readonly add class to the wrapper \n      if (uiw._editor.isReadOnly()){\n        uiw.element.closest('.codemirror-wrapper').addClass(C_TOOLBAR_CLASS_READONLY);\n      }    \n\n      // autocomplete\n      if (uiw.options.autocomplete){\n        CodeMirror.commands.autocomplete = function(pEditor) {\n\n          var modeOption = pEditor.doc.modeOption,\n              hint,\n              options = {};\n                        \n          switch (modeOption) {\n              case \"text/javascript\": \n                hint = CodeMirror.hint.javascript; \n                break;\n              case \"text/css\":        \n                hint = CodeMirror.hint.css; \n                break;\n              case \"text/html\":       \n                hint = CodeMirror.hint.html; \n                break;\n              case \"text/x-plsql\":\n                hint = customHint;//uiw._customHint;\n                options = {\n                    async:        true,\n                    dataCallback: function( pSearchOptions, pCallback ) {\n                                    apex.server.plugin (uiw.options.ajaxId, {\n                                      x01: \"hint\",\n                                      x02: pSearchOptions.search,\n                                      x03: pSearchOptions.parent,\n                                      x04: pSearchOptions.grantParent\n                                    }, {\n                                      success: pCallback\n                                    });  \n                                  }                 \n                };\n                break;\n          }\n\n          if (hint)  {         \n            CodeMirror.showHint( pEditor, hint, options );\n          }\n        };\n      }    \n      \n    \n      // Init APEX item\n      apex.item.create(uiw.options.itemName, {\n        // get validity\n        getValidity: function() {\n          var lValidity = { valid: true };\n          /*\n          if (  item is not valid  ) {\n              lValidity.valid = false;\n          }\n          */\n          return lValidity;\n        },\n\n        // get value\n        getValue: function(){\n          apex.debug.log('CodeMirror Plugin', 'getValue');\n          return uiw._editor.doc.getValue();\n        },\n\n        // set value\n        setValue: function(pValue){\n          apex.debug.log('CodeMirror Plugin', 'setValue');\n          uiw._editor.doc.setValue(pValue);\n        },\n        \n        // disable\n        disable: function(){\n          apex.debug.log('CodeMirror Plugin', 'Not implemented');\n        },\n        \n        // enable\n        enable: function(){\n          apex.debug.log('CodeMirror Plugin', 'Not implemented'); \n        },    \n        \n        // show\n        show: function(){\n          apex.debug.log('CodeMirror Plugin', 'Not implemented');\n        },  \n        \n        // hide\n        hide: function(){\n          apex.debug.log('CodeMirror Plugin', 'Not implemented');\n        },  \n        \n        // is changed        \n        isChanged: function() {\n          return uiw.changed;\n        } \n                \n      });    \n    },\n  \n    // Log/Debug Function\n    _log: function (pFunctionName, pLogMessage){\n      apex.debug.log('Code Mirror', pFunctionName, pLogMessage);\n      //console.log('Code Mirror', pFunctionName, pLogMessage);\n    },\n  \n    _destroy: function(){\n      var uiw = this;\n      uiw._editor.off('change');\n    },\n\n    _renderButton: function(toolbar, id, label, icon, extraClasses, disabled ) {\n      var uiw = this;\n      toolbar.markup( \"<button\" )\n            .attr( \"id\", uiw.baseId + \"_\" +id )\n            .optionalAttr( \"title\", label)\n            .optionalAttr( \"aria-label\", label)\n            .optionalBoolAttr( \"disabled\", disabled )\n            .attr( \"class\", \"a-Button a-Button--noLabel a-Button--withIcon\" + ( extraClasses ? \" \" + extraClasses : \"\" ) )\n            .markup(\" type='button'>\" )\n            .markup( \"<span class='a-Icon \" )\n            .attr(icon)\n            .markup( \"' aria-hidden='true'></span></button>\" );  \n    },\n\n    _initToolbar: function(){\n      var uiw = this,\n      toolbar = util.htmlBuilder();\n\n      // internal toolbar function for adding button action\n      function addAction(pCommand ) {\n        $(document).on('click', \"#\" + uiw.baseId + \"_\" + pCommand, function() {\n            if (uiw._editor) {\n              uiw._editor.focus();\n              switch (pCommand){\n                case 'fullScreenOn':\n                  uiw._editor.setOption(\"fullScreen\", !uiw._editor.getOption(\"fullScreen\"));\n                  break;\n                case 'fullScreenOff':\n                  if (uiw._editor.getOption(\"fullScreen\")) uiw._editor.setOption(\"fullScreen\", false);\n                  break;\n                default:\n                  setTimeout(function() {\n                    uiw._editor.execCommand( pCommand );\n                  }, 10);\n                  break;\n              }\n\n            }\n        } );\n      }\n\n      \n      // generate toolbar markdown\n      toolbar.markup('<div class=\"'+C_TOOLBAR_CLASS+'\">');\n      if(!uiw.options.readonly){\n        uiw._renderButton(toolbar, 'undo', 'Undo' , 'icon-undo', 'a-Button--small a-Button--pillStart', true);\n        uiw._renderButton(toolbar, 'redo', 'Redo' , 'icon-redo', 'a-Button--small a-Button--pill', true);\n        addAction('undo');\n        addAction('redo');                \n      }  \n      uiw._renderButton(toolbar, 'fullScreenOn' , 'Full Screen On' , 'icon-maximize', 'a-Button--small a-Button--pillEnd aCodeMirrorPluginFullScreenOn u-pullRight');\n      uiw._renderButton(toolbar, 'fullScreenOff', 'Full Screen Off', 'icon-restore', 'a-Button--small a-Button--pillEnd aCodeMirrorPluginFullScreenOff u-pullRight');\n      toolbar.markup('</div>');\n\n      // generate actions\n      addAction('fullScreenOn');\n      addAction('fullScreenOff');\n\n      uiw.element.after(toolbar.toString());\n      uiw.element.closest('div').addClass('codemirror-wrapper');\n      uiw.element.closest('div.t-Form-fieldContainer').addClass('codemirror-container-wrapper');\n      \n/*\n      uiw.settingsMenu$ = $(toolbar);\n      uiw.settingsMenu$.menu({\n        items: [\n          {\n            type: \"toggle\", \n            labelKey: \"Full Screen\", \n            get: function(){\n              alert('aaa');\n            }\n          }\n        ]}\n      );\n      */\n    }\n\n  });  \n\n})(apex.jQuery, apex.util);\n\n"],"file":"codemirror_custom.js"}