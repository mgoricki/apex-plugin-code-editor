{"version":3,"sources":["plugins/codemirror/codemirror_custom.js","plugins/codemirror/addon/display/fullscreen.js"],"names":[],"mappingsxXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"codemirror_custom.js","sourcesContent":["/*\n* Plugin:  Codemirror Plugin\n* Version: 1.0.0 (20.08.2018.)\n*\n* Author:  Marko Goricki, BiLog\n* Mail:    mgoricki@gmail.com\n* Twitter: @mgoricki\n* Blog:    apexbyg.blogspot.com \n*\n* Depends:\n*    apex/debug.js \n*\n* Changes:\n* \n* v.1.0.4 - 20211123 - upgraded to CodeMirror 5.64.0, APEX version 21.2\n* v.1.0.3 - 20191009 - setHeight and setWidth\n* v.1.0.0 - 20180820 - Initial version\n*\n* Public Methods:\n*\n*   Get Options\n*   $('#P2_EDITOR').codemirror_plugin('option');\n*\n*   Set Height\n*   apex.item('P2_EDITOR').callbacks.setHeight('auto');\n*   apex.item('P2_EDITOR').callbacks.setHeight('600'); -- in px\n*   apex.item('P2_EDITOR').callbacks.setHeight('100%'); -- in %\n*\n* Notes:\n*   - \n*\n*/\n\n\n\n(function ($, util) {\n  \"use strict\";\n\n  var C_PLUGIN_NAME = \"Code Mirror Editor\";\n  var C_TOOLBAR_CLASS = \"codemirror-toolbar\";\n  var C_TOOLBAR_CLASS_READONLY = \"codemirror-readonly\";\n\n  $.widget(\"apex.codemirror_plugin\", {\n    options : {\n      itemName : null,\n      readonly: false,\n      ignoreChanged: false, // Warn On Unsaved Changes\n      ajaxId: null,\n      autocomplete: false,\n      runInFullscreen: false,\n      autocompleteHints: [],  \n      config: {} // override with JS initalization codes            \n    },\n    changed: false,\n    baseId:  \"aCodeMirrorPlugin\",\n\n    /**\n     * Return Autocomplete Options\n     * @param {} cm \n     * @param {*} option \n     */  \n    _returnAutocompleteOptions: function(cm, options){      \n      var comp = options.autocompleteHints;\n      return new Promise(function(accept) {\n        setTimeout(function() {          \n          var cursor = cm.getCursor(), line = cm.getLine(cursor.line)\n          var start = cursor.ch, end = cursor.ch\n          while (start && /\\w/.test(line.charAt(start - 1))) --start\n          while (end < line.length && /\\w/.test(line.charAt(end))) ++end\n          var word = line.slice(start, end).toLowerCase()\n          \n          // filter array\n          var vOutput = comp.filter(function(value, index, arr){    \n            var vParam = value.text.toLowerCase();\n            var vParamOnly = vParam.substr(vParam.indexOf('$')+1);\n            \n            return vParam.startsWith(word) || vParamOnly.startsWith(word);\n          });\n\n         if (vOutput.length>0){\n           return accept({\n                list: vOutput\n              , from: CodeMirror.Pos(cursor.line, start)\n              , to: CodeMirror.Pos(cursor.line, end)\n            });\n         }else{\n           return accept(null);\n         }\n\n         \n        }, 100)\n      })      \n    } ,   \n\n    // init function\n    _init : function () {\n      var uiw = this;\n      var vMasterOk = false;\n\n      uiw.baseId = uiw.options.itemName;      \n\n      $.extend(uiw.options,uiw.options.config);\n\n      uiw._editor = \n        CodeMirror.fromTextArea(document.getElementById(uiw.options.itemName),\n          {\n            mode:\"text/x-plsql\",\n            indentWithTabs: true,\n            martIndent: true,\n            lineNumbers: true,\n            matchBrackets : true,\n            textWrapping : false,\n            autofocus: false,\n            indentUnit: 2,\n            smartIndent: true,\n            tabSize: 2,\n            viewportMargin: 5,\n            readOnly: uiw.options.readonly,//\"nocursor\"\n            extraKeys: {              \n              \"Ctrl-Space\": \"autocomplete\",\n              \"F11\": function(cm) {\n                cm.setOption(\"fullScreen\", !cm.getOption(\"fullScreen\"));\n              },            \n              \"Esc\": function(cm) {\n                if (cm.getOption(\"fullScreen\")) cm.setOption(\"fullScreen\", false);\n              }\n            },\n            autoCloseBrackets: true\n          });\n\n\n      // event handlers\n      // if Warn on unsaved changes is set to Yes\n      if (!uiw.options.ignoreChanged){\n        uiw._editor.on('change', function(){\n          uiw.changed = true;\n          \n          var vHistory$ = uiw._editor.historySize();\n          $(\"#\" + uiw.baseId + \"_undo\")[0].disabled = vHistory$.undo === 0;\n          $(\"#\" + uiw.baseId + \"_redo\")[0].disabled = vHistory$.redo === 0;\n        });  \n      }\n\n      // code complete\n      uiw._initToolbar();\n\n      if (uiw.options.runInFullscreen){\n        uiw._editor.setOption('fullScreen', true);\n      }    \n\n      // if Editor is readonly add class to the wrapper \n      if (uiw._editor.isReadOnly()){\n        uiw.element.closest('.codemirror-wrapper').addClass(C_TOOLBAR_CLASS_READONLY);\n      }    \n\n      // autocomplete\n      if (uiw.options.autocomplete){\n        CodeMirror.commands.autocomplete = function(pEditor) {\n          var modeOption = pEditor.doc.modeOption,\n              hint,\n              options = {};\n                        \n          switch (modeOption) {\n              case \"text/javascript\": \n                hint = CodeMirror.hint.javascript; \n                break;\n              case \"text/css\":        \n                hint = CodeMirror.hint.css; \n                break;\n              case \"text/html\":       \n                hint = CodeMirror.hint.html; \n                break;\n              case \"text/x-plsql\":\n                hint = uiw._returnAutocompleteOptions;\n                options.autocompleteHints = uiw.options.autocompleteHints;\n                /*\n                options = {\n                    async:        false,\n                    dataCallback: function( pSearchOptions, pCallback ) {\n                                    apex.server.plugin (uiw.options.ajaxId, {\n                                      x01: \"hint\",\n                                      x02: pSearchOptions.search,\n                                      x03: pSearchOptions.parent,\n                                      x04: pSearchOptions.grantParent\n                                    }, {\n                                      success: pCallback\n                                    });  \n                                  }                 \n                };\n                */\n                break;\n          }\n\n          if (hint)  {                \n            CodeMirror.showHint(pEditor, hint, options );\n          }\n        };\n        \n      }   \n      \n    \n      // Init APEX item\n      apex.item.create(uiw.options.itemName, {\n        // get validity\n        getValidity: function() {\n          var lValidity = { valid: true };\n          /*\n          if (  item is not valid  ) {\n              lValidity.valid = false;\n          }\n          */\n          return lValidity;\n        },\n\n        // get value\n        getValue: function(){\n          apex.debug.log('CodeMirror Plugin', 'getValue');\n          return uiw._editor.doc.getValue();\n        },\n\n        // set value\n        setValue: function(pValue){\n          apex.debug.log('CodeMirror Plugin', 'setValue');\n          uiw._editor.doc.setValue(pValue);\n        },\n        \n        // disable\n        disable: function(){\n          uiw._disable();\n        },\n        \n        // enable\n        enable: function(){\n          uiw._enable();\n        },    \n        \n        // show\n        show: function(){\n          apex.debug.log('CodeMirror Plugin', 'Not implemented');\n        },  \n        \n        // hide\n        hide: function(){\n          apex.debug.log('CodeMirror Plugin', 'Not implemented');\n        },  \n        \n        // is changed        \n        isChanged: function() {\n          return uiw.changed;\n        },\n\n        // setHeight - can be 'auto', or number in px or number in %\n        setHeight: function(pHeight){\n          uiw._editor.setSize(null,pHeight);\n        },\n\n        // setWidth - can be 'auto', or number in px or number in %\n        setWidth: function(pWidth){\n          uiw._editor.setSize(pWidth,null);\n        }        \n                \n      });    \n    },\n\n    // Log/Debug Function\n    _log: function (pFunctionName, pLogMessage){\n      apex.debug.log('Code Mirror', pFunctionName, pLogMessage);\n      //console.log('Code Mirror', pFunctionName, pLogMessage);\n    },\n  \n    _destroy: function(){\n      var uiw = this;\n      uiw._editor.off('change');\n    },\n\n    _renderButton: function(toolbar, id, label, icon, extraClasses, disabled ) {\n      var uiw = this;\n      toolbar.markup( \"<button\" )\n            .attr( \"id\", uiw.baseId + \"_\" +id )\n            .optionalAttr( \"title\", label)\n            .optionalAttr( \"aria-label\", label)\n            .optionalBoolAttr( \"disabled\", disabled )\n            .attr( \"class\", \"a-Button a-Button--noLabel a-Button--withIcon\" + ( extraClasses ? \" \" + extraClasses : \"\" ) )\n            .markup(\" type='button'>\" )\n            .markup( \"<span class='a-Icon \" )\n            .attr(icon)\n            .markup( \"' aria-hidden='true'></span></button>\" );  \n    },\n\n    _initToolbar: function(){\n      var uiw = this,\n      toolbar = util.htmlBuilder();\n\n      // internal toolbar function for adding button action\n      function addAction(pCommand ) {\n        $(document).on('click', \"#\" + uiw.baseId + \"_\" + pCommand, function() {\n            if (uiw._editor) {\n              uiw._editor.focus();\n              switch (pCommand){\n                case 'fullScreenOn':\n                  uiw._editor.setOption(\"fullScreen\", !uiw._editor.getOption(\"fullScreen\"));\n                  break;\n                case 'fullScreenOff':\n                  if (uiw._editor.getOption(\"fullScreen\")) uiw._editor.setOption(\"fullScreen\", false);\n                  break;\n                default:\n                  setTimeout(function() {\n                    uiw._editor.execCommand( pCommand );\n                  }, 10);\n                  break;\n              }\n\n            }\n        } );\n      }\n\n      \n      // generate toolbar markdown\n      toolbar.markup('<div class=\"'+C_TOOLBAR_CLASS+'\">');\n      if(!uiw.options.readonly){\n        uiw._renderButton(toolbar, 'undo', 'Undo' , 'icon-undo', 'a-Button--small a-Button--pillStart', true);\n        uiw._renderButton(toolbar, 'redo', 'Redo' , 'icon-redo', 'a-Button--small a-Button--pill', true);\n        addAction('undo');\n        addAction('redo');                \n      }  \n      uiw._renderButton(toolbar, 'fullScreenOn' , 'Full Screen On' , 'icon-maximize', 'a-Button--small a-Button--pillEnd aCodeMirrorPluginFullScreenOn u-pullRight');\n      uiw._renderButton(toolbar, 'fullScreenOff', 'Full Screen Off', 'icon-restore', 'a-Button--small a-Button--pillEnd aCodeMirrorPluginFullScreenOff u-pullRight');\n      toolbar.markup('</div>');\n\n      // generate actions\n      addAction('fullScreenOn');\n      addAction('fullScreenOff');\n\n      uiw.element.after(toolbar.toString());\n      uiw.element.closest('div').addClass('codemirror-wrapper');\n      uiw.element.closest('div.t-Form-fieldContainer').addClass('codemirror-container-wrapper');\n      \n/*\n      uiw.settingsMenu$ = $(toolbar);\n      uiw.settingsMenu$.menu({\n        items: [\n          {\n            type: \"toggle\", \n            labelKey: \"Full Screen\", \n            get: function(){\n              alert('aaa');\n            }\n          }\n        ]}\n      );\n      */\n    },\n    _enable: function(){\n      var uiw = this;\n      apex.debug.log(C_PLUGIN_NAME, '_enable');\n      uiw._editor.setOption('readOnly', false);\n      var wrapper$ = uiw.element.closest('.codemirror-wrapper');\n      wrapper$.removeClass(C_TOOLBAR_CLASS_READONLY);\n      wrapper$.find('.codemirror-toolbar > button[id$=undo]').prop('disabled', false);\n      wrapper$.find('.codemirror-toolbar > button[id$=redo]').prop('disabled', false);\n    },\n    _disable: function(){\n      var uiw = this;\n      apex.debug.log(C_PLUGIN_NAME, '_disable');\n      uiw._editor.setOption('readOnly', true);\n      var wrapper$ = uiw.element.closest('.codemirror-wrapper');\n      wrapper$.addClass(C_TOOLBAR_CLASS_READONLY);\n      wrapper$.find('.codemirror-toolbar > button[id$=undo]').prop('disabled', true);\n      wrapper$.find('.codemirror-toolbar > button[id$=redo]').prop('disabled', true);\n    }\n\n\n  });  \n\n})(apex.jQuery, apex.util);\n\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n \n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"fullScreen\", false, function(cm, val, old) {\n    if (old == CodeMirror.Init) old = false;\n    if (!old == !val) return;\n    if (val) setFullscreen(cm);\n    else setNormal(cm);\n  });\n\n  function setFullscreen(cm) {\n    var wrap = cm.getWrapperElement();\n    $(wrap).closest('div.codemirror-wrapper').addClass('codemirror-wrapp-fullscreen');\n    cm.state.fullScreenRestore = {scrollTop: window.pageYOffset, scrollLeft: window.pageXOffset,\n                                  width: wrap.style.width, height: wrap.style.height};\n    wrap.style.width = \"\";\n    wrap.style.height = \"auto\";\n    wrap.className += \" CodeMirror-fullscreen\";\n    document.documentElement.style.overflow = \"hidden\";\n    cm.refresh();\n  }\n\n  function setNormal(cm) {\n    var wrap = cm.getWrapperElement();\n    $(wrap).closest('div.codemirror-wrapper').removeClass('codemirror-wrapp-fullscreen');\n    wrap.className = wrap.className.replace(/\\s*CodeMirror-fullscreen\\b/, \"\");\n    document.documentElement.style.overflow = \"\";\n    var info = cm.state.fullScreenRestore;\n    wrap.style.width = info.width; wrap.style.height = info.height;\n    window.scrollTo(info.scrollLeft, info.scrollTop);\n    cm.refresh();\n  }\n});\n\n//# sourceMappingURL=fullscreen.js.map\n"]}